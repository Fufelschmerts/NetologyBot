import random
import telebot

# –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –Ω–∞ –ü–∏—Ç–æ–Ω–µ –ø–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É –∫—É—Ä—Å—É –æ—Ç –ù–µ—Ç–æ–ª–æ–≥–∏–∏

token = 'token telegram bot'

bot = telebot.TeleBot(token)

HELP = '''
/help - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ—É –æ –ë–æ—Ç–µ
/add [–¥–∞—Ç–∞] [–∑–∞–¥–∞—á–∞] - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
/show [–¥–∞—Ç–∞] - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å
/exit - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–æ—Ç–∞
/print - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
/random - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–∞—á—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
'''

TODAY_TASKS = list()
TOMORROW_TASKS = list()
OTHER_TASKS = dict()

RANDOM_TASKS = ['–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Å–µ—Ä–≤–∏—Å', '–ö—É–ø–∏—Ç—å —Ö–ª–µ–±', '–ó–∞—Ö–≤–∞—Ç–∏—Ç—å –º–∏—Ä', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏–∞–ª', '–ü–æ–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É']


# @bot.message_handler(commands=['show'])
# def command_show(message):
#     bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É')


@bot.message_handler(commands=['show'])
def command_show(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É')


# @bot.message_handler(func=lambda message: True)
# def show_tasks(message):
#     message_array = message.text.lower().split()
#     print(message_array)
#     if '—Å–µ–≥–æ–¥–Ω—è' in message_array or 'today' in message_array:
#         if not TODAY_TASKS:
#             bot.send_message(message.chat.id, "–ó–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç")
#         else:
#             bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{'\n'.join(TODAY_TASKS)}")
#     elif '–∑–∞–≤—Ç—Ä–∞' in message_array or 'tomorrow' in message_array:
#         if not TOMORROW_TASKS:
#             bot.send_message(message.chat.id, "–ó–∞–¥–∞—á –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ—Ç")
#         else:
#             bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n{'\n'.join(TOMORROW_TASKS)}")
#     else:
#         for date in OTHER_TASKS:
#             if date in message_array:
#                 bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∏ –Ω–∞ {date}:\nüìå{OTHER_TASKS[date]}")
#                 break
#         else:
#             bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á –Ω–∞ {message.text} –Ω–µ—Ç")
#     return

@bot.message_handler(commands=['help'])
def command_help(message):
    bot.send_message(message.chat.id, HELP)


@bot.message_handler(commands=['exit'])
def command_exit(message):
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –æ—á–∏—à–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥')
    return bot.stop_polling()


def add_other_todo(date, task):
    if date in OTHER_TASKS:
        OTHER_TASKS[date] += f', {task}'
    else:
        OTHER_TASKS[date] = task


@bot.message_handler(commands=['add', 'random'])
def handle_add_random(message):
    command = message.text.split(maxsplit=2)
    if message.text.startswith('/add'):
        date = command[1].lower()
        task = command[2]
        print(command)
        if date == '—Å–µ–≥–æ–¥–Ω—è' or date == 'today':
            TODAY_TASKS.append(f'üìå{task}')
        elif date == '–∑–∞–≤—Ç—Ä–∞' or date == 'tomorrow':
            TOMORROW_TASKS.append(f'üìå{task}')
        else:
            add_other_todo(date, task)
        bot.send_message(message.chat.id, f'–ó–∞–¥–∞—á–∞ "{task}" –Ω–∞ {date} –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    if message.text == '/random':
        task = random.choice(RANDOM_TASKS)
        TODAY_TASKS.append(f'üìå{task}')
        bot.send_message(message.chat.id, f'–ó–∞–¥–∞—á–∞ "{task}" –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    return


@bot.message_handler(commands=['print'])
def command_show_all(message):
    if not TODAY_TASKS and not TOMORROW_TASKS and OTHER_TASKS == {}:
        bot.send_message(message.chat.id, "–ó–∞–¥–∞—á –Ω–µ—Ç")
    if TODAY_TASKS:
        bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{'\n'.join(TODAY_TASKS)}")
    if TOMORROW_TASKS:
        bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n{'\n'.join(TOMORROW_TASKS)}")
    if OTHER_TASKS:
        bot.send_message(message.chat.id, f"–î—Ä—É–≥–∏–µ –¥–∞—Ç—ã:\nüìå{'\nüìå'.join([f'{key}: {value}' for key, value in OTHER_TASKS.items()])}")
    return


@bot.message_handler(content_types=['text'])
def dialog(message):
    message_array = message.text.lower().split()  # —Ä–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ª–æ–≤–∞
    if '–∏–≤–∞–Ω' in message_array:
        bot.send_message(message.chat.id, '–ë–∞! –ó–Ω–∞–∫–æ–º—ã–µ –≤—Å–µ –ª–∏—Ü–∞!')
    if '—Å–µ–≥–æ–¥–Ω—è' in message_array or 'today' in message_array:
        if not TODAY_TASKS:
            bot.send_message(message.chat.id, "–ó–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç")
        else:
            bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{'\n'.join(TODAY_TASKS)}")
    elif '–∑–∞–≤—Ç—Ä–∞' in message_array or 'tomorrow' in message_array:
        if not TOMORROW_TASKS:
            bot.send_message(message.chat.id, "–ó–∞–¥–∞—á –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ—Ç")
        else:
            bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n{'\n'.join(TOMORROW_TASKS)}")
    else:
        for date in OTHER_TASKS:
            if date in message_array:
                bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∏ –Ω–∞ {date}:\nüìå{OTHER_TASKS[date]}")
                break
        else:
            bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á –Ω–∞ {message.text} –Ω–µ—Ç")
    return


# #  –ó–∞–¥–∞–Ω–∏–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ-—é –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ —Å —ç—Ç–æ–π –±—É–∫–≤–æ–π
#
# task_array = ['–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Å–µ—Ä–≤–∏—Å', '–ö—É–ø–∏—Ç—å —Ö–ª–µ–±', '–ó–∞—Ö–≤–∞—Ç–∏—Ç—å –º–∏—Ä', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏–∞–ª', '–ü–æ–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É']
#
#
# def count_letter(words_list, letter):
#     result = 0
#     for word in words_list:
#         if letter in word:
#             result += 1
#     return result
#
#
# print(count_letter(task_array, '–∞'))


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–∞—á–∏


#
# while is_running:
#     command = input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ')
#     if command.lower() == 'help':
#         print(HELP)
#         continue
#     elif command.lower() == '':
#         print('–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É!')
#         continue
#     elif command.lower() == 'add':
#         date = input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É: ")
#         task = input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É: ")
#         if date == '':
#             print('–í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–∞—Ç—É!')
#             continue
#         elif date.lower() == '—Å–µ–≥–æ–¥–Ω—è' or date.lower() == 'today':
#             today_task.append(f'üìå{task}')
#         elif date.lower() == '–∑–∞–≤—Ç—Ä–∞' or date.lower() == 'tomorrow':
#             tomorrow_task.append(f'üìå{task}')
#         else:
#             add_other_todo(date, task)
#         print(f'–ó–∞–¥–∞—á–∞ "{task}" –Ω–∞ {date} –¥–æ–±–∞–≤–ª–µ–Ω–∞')
#         continue
#     elif command == 'show':
#         date = input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–¥–∞—á: ")
#         if date == '':
#             print('–í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–∞—Ç—É!')
#             continue
#         elif date.lower() == '—Å–µ–≥–æ–¥–Ω—è' or date.lower() == 'today':
#             if not today_task:
#                 print("–ó–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç")
#             else:
#                 print(f"–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{'\n'.join(today_task)}")
#                 continue
#         elif date.lower() == '–∑–∞–≤—Ç—Ä–∞' or date.lower() == 'tomorrow':
#             if not tomorrow_task:
#                 print('–ó–∞–¥–∞—á –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ—Ç')
#             else:
#                 print(f"–ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n{'\n'.join(tomorrow_task)}")
#                 continue
#         else:
#             if date in other_task:
#                 print(f"–ó–∞–¥–∞—á–∏ –Ω–∞ {date}:\nüìå{other_task[date]}")
#                 continue
#             else:
#                 print(f"–ó–∞–¥–∞—á –Ω–∞ {date} –Ω–µ—Ç")
#     elif command == 'show all':
#         if not today_task and not tomorrow_task and other_task == {}:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
#             print("–ó–∞–¥–∞—á –Ω–µ—Ç")
#         if today_task:
#             print(f"–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{'\n'.join(today_task)}")
#         if tomorrow_task:
#             print(f"–ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n{'\n'.join(tomorrow_task)}")
#         if other_task:
#             print(f"–î—Ä—É–≥–∏–µ –¥–∞—Ç—ã:\nüìå{'\nüìå'.join([f'{key}: {value}' for key, value in other_task.items()])}")
#     elif command.lower() == 'random':
#         print("–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
#         today_task.append(f'üìå{random_task()}')
#     elif command.lower() == 'exit':
#         print('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ! –ò –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!')
#         break
#     else:
#         print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –í–≤–µ–¥–∏—Ç–µ help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
#         continue
#
# print('–ó–∞—Ö–æ–¥–∏—Ç–µ –µ—â—ë!')


# –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º —Ç–µ–ª–µ–≥—Ä–∞–º
bot.polling(none_stop=True)
